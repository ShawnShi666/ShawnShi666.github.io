<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shawn&#39;s blog</title>
  
  <subtitle>世界辣么繁华，我想粗去溜达.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shixiaohe.online/"/>
  <updated>2017-12-28T15:08:51.000Z</updated>
  <id>http://shixiaohe.online/</id>
  
  <author>
    <name>Shawn Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>#MySQL 总结 (一)</title>
    <link href="http://shixiaohe.online/2017/12/28/MySQL-%E6%80%BB%E7%BB%93-%E4%B8%80/"/>
    <id>http://shixiaohe.online/2017/12/28/MySQL-总结-一/</id>
    <published>2017-12-28T14:59:39.000Z</published>
    <updated>2017-12-28T15:08:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-总结-一"><a href="#MySQL-总结-一" class="headerlink" title="MySQL 总结 (一)"></a>MySQL 总结 (一)</h1><a id="more"></a><p>@(<a href="http://www.shixiaohe.online)[MySQL" target="_blank" rel="noopener">http://www.shixiaohe.online)[MySQL</a> , Author：Shawn]</p><hr><h2 id="登陆-mysql"><a href="#登陆-mysql" class="headerlink" title="登陆 mysql"></a>登陆 mysql</h2><blockquote><p><strong>mysql -h服务器主机地址 -u用户名 -p</strong></p><p>Eg: mysql -hlocalhost -uroot -p</p></blockquote><h2 id="基本命令行-1"><a href="#基本命令行-1" class="headerlink" title="基本命令行(1)"></a>基本命令行(1)</h2><blockquote><p>mysql&gt; <code>show databases;</code><br>(查看当前服务器上的所有数据库)</p><p>mysql&gt; <code>create database test;</code><br>(创建数据库 test)</p><p>mysql&gt; <code>use test;</code><br>(使用数据库 test)</p><p>mysql&gt; <code>show tables;</code><br>(查看数据库 test 中的所有数据表)</p><p>mysql&gt; <code>drop database test;</code><br>(删除数据库 test)</p><p>Eg 如下代码所示：</p></blockquote><pre><code>mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sakila             || sys                || world              |+--------------------+6 rows in setmysql&gt; create database test;Query OK, 1 row affectedmysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sakila             || sys                || test               || world              |+--------------------+7 rows in setmysql&gt; use test;Database changedmysql&gt; show tables;Empty setmysql&gt; drop database test;Query OK, 0 rows affected</code></pre><h2 id="MySQL-结构化查询语句分类"><a href="#MySQL-结构化查询语句分类" class="headerlink" title="MySQL 结构化查询语句分类"></a>MySQL 结构化查询语句分类</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:right">解释</th><th style="text-align:center">命令</th></tr></thead><tbody><tr><td style="text-align:left">DDL(数据定义语言)</td><td style="text-align:right">定义和管理数据对象，如数据库数据表等</td><td style="text-align:center">CREATE,DROP,ALTER</td></tr><tr><td style="text-align:left"><code>DML</code>(数据操作语言)</td><td style="text-align:right">用于操作数据库对象中所包含的数据</td><td style="text-align:center">INSERT、UPDATE、DELETE</td></tr><tr><td style="text-align:left"><code>DQL</code>(数据查询语言)</td><td style="text-align:right">用于查询数据库数据</td><td style="text-align:center">SELECT</td></tr><tr><td style="text-align:left">DCL(数据控制语言)</td><td style="text-align:right">用来管理数据库的语言,包括管理权限及数据更改</td><td style="text-align:center">GRANT、COMMIT、ROLLBACK</td></tr></tbody></table><h2 id="基本命令行-2"><a href="#基本命令行-2" class="headerlink" title="基本命令行(2)"></a>基本命令行(2)</h2><blockquote><p>mysql&gt; <code>create table user(字段信息);</code><br>(创建数据表)</p><p>mysql&gt; <code>show tables;</code><br>(查看当前数据中的所有数据表)</p><p>mysql&gt; <code>show create table user;</code><br>(查看数据表 user 的创建信息)</p><p>mysql&gt; <code>desc user;</code><br>(查看数据表 user 的信息)</p><p>mysql&gt; <code>drop database test;</code><br>(删除数据库 test)</p><p>Eg 如下代码所示：</p></blockquote><pre><code>mysql&gt; create database test;Query OK, 1 row affectedmysql&gt; use test;Database changedmysql&gt; create table user(    -&gt; id int(5),    -&gt; name varchar(15),    -&gt; age int(3),    -&gt; tel int(11)    -&gt; );Query OK, 0 rows affectedmysql&gt; show tables;+----------------+| Tables_in_test |+----------------+| user           |+----------------+1 row in setmysql&gt; show create table user;+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table | Create Table                                                                                                                                                                   |+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| user  | CREATE TABLE `user` (  `id` int(5) DEFAULT NULL,  `name` varchar(15) DEFAULT NULL,  `age` int(3) DEFAULT NULL,  `tel` int(11) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 |+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+1 row in setmysql&gt; desc user;+-------+-------------+------+-----+---------+-------+| Field | Type        | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id    | int(5)      | YES  |     | NULL    |       || name  | varchar(15) | YES  |     | NULL    |       || age   | int(3)      | YES  |     | NULL    |       || tel   | int(11)     | YES  |     | NULL    |       |+-------+-------------+------+-----+---------+-------+4 rows in set</code></pre><h2 id="字段属性总结"><a href="#字段属性总结" class="headerlink" title="字段属性总结"></a>字段属性总结</h2><blockquote><p>列类型一般分为：<br><code>数值类型</code>、<code>字符串类型</code>、<code>日期和时间型数值类型</code>、<code>NULL 值</code>（不再一一赘述, 不清楚查一下即可.）</p><p><strong>列属性：</strong><br>（1）<code>UNSIGNED</code>:<br> ① 无符号的<br> ② 声明该数据列不允许负数<br>（2）<code>ZEROFILL</code>:<br> ① 0 填充<br> ② 不足位数的用 0 来填充，如 int(3)，5 则为 005<br>（3）<code>AUTO_INCREMENT</code>:<br> ① 自动增长的,每添加一条数据,自动在上一个记录数上 + 1<br> ② 通常用于设置<code>主键</code>，且为整数类型<br> ③ 可定义起始值和步长<br>（4）<code>NULL</code> 和 <code>NOT NULL</code><br> ① 默认为 NULL，即没有插入该列的数值<br> ② 如果设置为 NOT NULL，则该列必须有值<br>（5）<code>DEFAULT</code><br> ① 默认的<br> ② 用于设置默认值</p></blockquote><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:right">类型</th><th style="text-align:center">空</th><th style="text-align:center">默认</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:left">StudentNo</td><td style="text-align:right">int(4)</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center">学号</td></tr><tr><td style="text-align:left">LoginPwd</td><td style="text-align:right">varchar(20)</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">StudentName</td><td style="text-align:right">varchar(20)</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center">学生姓名</td></tr><tr><td style="text-align:left">Sex</td><td style="text-align:right">tinyint(1)</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center">性别,取值 0 或 1</td></tr><tr><td style="text-align:left">GradeId</td><td style="text-align:right">int(11)</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center">年级编号</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">varchar(50)</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center">联系电话，允许为空，即可选输入</td></tr><tr><td style="text-align:left">Address</td><td style="text-align:right">varchar(255)</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center">地址允许为空,即可选输入</td></tr><tr><td style="text-align:left">BornDate</td><td style="text-align:right">datetime</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center">出生时间</td></tr><tr><td style="text-align:left">Email</td><td style="text-align:right">varchar(50)</td><td style="text-align:center">否</td><td style="text-align:center"></td><td style="text-align:center">邮箱账号,允许为空,即可选输入</td></tr><tr><td style="text-align:left">IdentityCard</td><td style="text-align:right">varchar(18)</td><td style="text-align:center">是</td><td style="text-align:center">NULL</td><td style="text-align:center">身份账号</td></tr></tbody></table><pre><code>mysql&gt; use test;Database changedmysql&gt; create table `mystudent` (`StudentNo` int(4) not null comment &apos;学号&apos;,`LoginPwd` varchar(20) default null,`StudentName` varchar(20) default null comment &apos;学生姓名&apos;,`Sex` tinyint(1) default null comment &apos;性别,取值 0 或 1&apos;,`GradeId` int(11) default null comment &apos;年级编号&apos;,`Phone` varchar(50) not null comment &apos;联系电话,允许为空,即可选输入&apos;,`Address` varchar(255) not null comment &apos;地址允许为空,即可选输入&apos;,`BornDate` datetime default null comment &apos;出生时间&apos;,`Email` varchar(50) not null comment &apos;邮箱账号,允许为空,即可选输入&apos;,`IdentityCard` varchar(18) default null comment &apos;身份账号&apos;) engine=InnoDB default charset=utf8;Query OK, 0 rows affectedmysql&gt; desc mystudent;+--------------+------------------+------+-----+---------+----------------+| Field        | Type             | Null | Key | Default | Extra          |+--------------+------------------+------+-----+---------+----------------+| StudentNo    | int(4)           | NO   | PRI | NULL    | auto_increment || LoginPwd     | varchar(20)      | YES  |     | NULL    |                || StudentName  | varchar(20)      | YES  |     | NULL    |                || Sex          | tinyint(1)       | YES  |     | NULL    |                || GradeId      | int(11) unsigned | YES  |     | NULL    |                || Phone        | varchar(50)      | NO   |     | NULL    |                || Address      | varchar(255)     | NO   |     | NULL    |                || BornDate     | datetime         | YES  |     | NULL    |                || Email        | varchar(50)      | NO   |     | NULL    |                || IdentityCard | varchar(18)      | YES  |     | NULL    |                |+--------------+------------------+------+-----+---------+----------------+10 rows in set</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL-总结-一&quot;&gt;&lt;a href=&quot;#MySQL-总结-一&quot; class=&quot;headerlink&quot; title=&quot;MySQL 总结 (一)&quot;&gt;&lt;/a&gt;MySQL 总结 (一)&lt;/h1&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://shixiaohe.online/categories/MySQL/"/>
    
    
      <category term="MySQL 命令" scheme="http://shixiaohe.online/tags/MySQL-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>My SQL 卸载 &amp; 安装 For Windows</title>
    <link href="http://shixiaohe.online/2017/12/26/My-SQL-%E5%8D%B8%E8%BD%BD-%E5%AE%89%E8%A3%85-For-Windows/"/>
    <id>http://shixiaohe.online/2017/12/26/My-SQL-卸载-安装-For-Windows/</id>
    <published>2017-12-25T16:03:59.000Z</published>
    <updated>2017-12-28T15:07:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="My-SQL-卸载-amp-安装-For-Windows"><a href="#My-SQL-卸载-amp-安装-For-Windows" class="headerlink" title="My SQL 卸载 &amp; 安装 For Windows"></a>My SQL 卸载 &amp; 安装 For Windows</h1><a id="more"></a><p>@(<a href="http://www.shixiaohe.online)[MySQL" target="_blank" rel="noopener">http://www.shixiaohe.online)[MySQL</a> , Author：Shawn]</p><blockquote><p>注意事项：</p></blockquote><ul><li>My SQL Version : 5.7</li><li>数据目录不要放在系统盘, 以免卸载时删除数据包</li><li>启用安装向导,避免繁琐的 my.ini 配置文件（5.7 及以上版本不用管）</li><li>数据库语言编码设置</li></ul><blockquote><p>官方资料：</p></blockquote><ul><li><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">MySQL 下载</a></li><li><a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">MySQL 文档</a></li><li><a href="https://forums.mysql.com/" target="_blank" rel="noopener">MySQL 论坛</a></li></ul><hr><h2 id="My-SQL-卸载："><a href="#My-SQL-卸载：" class="headerlink" title="My SQL 卸载："></a>My SQL 卸载：</h2><h3 id="卸载与-MySQL-相关的软件包"><a href="#卸载与-MySQL-相关的软件包" class="headerlink" title="卸载与 MySQL 相关的软件包"></a>卸载与 MySQL 相关的软件包</h3><blockquote><p><code>5.5</code> 版本卸载会相当麻烦，此处为 <code>5.7</code> 版本卸载顺序</p></blockquote><ul><li>到控制面板中的 <code>卸载或更改程序</code> 中逐一卸载</li><li>安装 360 管家 (平常最好不要打开，或者用完就卸载掉)</li></ul><h3 id="删除与-MySQL-相关路径"><a href="#删除与-MySQL-相关路径" class="headerlink" title="删除与 MySQL 相关路径"></a>删除与 MySQL 相关路径</h3><ul><li><p>在安装目录把与 My SQL 相关的路径全部删掉<br>(在 C 盘中有一个隐藏文件夹 – ProgramData,以下图示可以将隐藏文件夹显示出来)</p><p><img src="/img/yincangfolder.png" alt="Alt text"></p></li><li>删除 ProgramData 文件夹中的 MySQL 文件夹<br>检查其他磁盘目录是否存在于 MySQL 相关的文件夹，存在的话，删掉.</li></ul><h3 id="清理与-My-SQL-相关的注册表"><a href="#清理与-My-SQL-相关的注册表" class="headerlink" title="清理与 My SQL 相关的注册表"></a>清理与 My SQL 相关的注册表</h3><p>  借助 360 工具进行清理（针对注册表）<br>  先用 360 进行全面的扫描，并清理临时文件，系统缓存，日志文件<br>  进行全部扫描查看注册表是否清理干净，弱没有清理干净，进行清理.<br>  单项清理注册表，并进行清理.</p><ul><li>control + R , 输入 regedit,进入注册表编辑器<br>删除以下内容：          <code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL</code>文件夹<br>如果能找到如下内容，删除<br><code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL</code><br><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL</code></li></ul><h3 id="删除与-MySQL-相关的软件包"><a href="#删除与-MySQL-相关的软件包" class="headerlink" title="删除与 MySQL 相关的软件包"></a>删除与 MySQL 相关的软件包</h3><ul><li>最好重启电脑，再进行安装.</li></ul><h2 id="My-SQL-安装："><a href="#My-SQL-安装：" class="headerlink" title="My SQL 安装："></a>My SQL 安装：</h2><h3 id="安装软件图解"><a href="#安装软件图解" class="headerlink" title="安装软件图解"></a>安装软件图解</h3><p><img src="/img/mysql1.png" alt="Alt text"><br><img src="/img/mysql2.png" alt="Alt text"><br><img src="/img/mysql3.png" alt="Alt text"><br><img src="/img/mysql4.png" alt="Alt text"><br><img src="/img/mysql5.png" alt="Alt text"><br><img src="/img/mysql6.png" alt="Alt text"><br><img src="/img/mysql8.png" alt="Alt text"><br><img src="/img/mysql7.png" alt="Alt text"><br><img src="/img/mysql9.png" alt="Alt text"><br><img src="/img/mysql10.png" alt="Alt text"><br><img src="/img/mysql11.png" alt="Alt text"><br><img src="/img/mysql12.png" alt="Alt text"><br><img src="/img/mysql13.png" alt="Alt text"><br><img src="/img/mysql14.png" alt="Alt text"><br><img src="/img/mysql15.png" alt="Alt text"><br><img src="/img/mysql16.png" alt="Alt text"><br><img src="/img/mysql17.png" alt="Alt text"><br><img src="/img/mysql18.png" alt="Alt text"><br><img src="/img/mysql19.png" alt="Alt text"><br><img src="/img/mysql20.png" alt="Alt text"><br><img src="/img/mysql21.png" alt="Alt text"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="/img/path1.png" alt="Alt text"></p><blockquote><p>我的电脑(右击) - 属性 - 高级系统设置 - 环境变量 - 找到 <code>Path</code><br><code>注意</code> 分号一定要是英文半角的.</p></blockquote><p><img src="/img/path.png" alt="Alt text"></p><h3 id="cmd-命令查看-MySQL-是否可以正常运行"><a href="#cmd-命令查看-MySQL-是否可以正常运行" class="headerlink" title="cmd 命令查看 MySQL 是否可以正常运行"></a>cmd 命令查看 MySQL 是否可以正常运行</h3><blockquote><p>出现 <code>Welcome to the MySQL monitor</code> 则表示可以正常运行.</p></blockquote><p><img src="/img/success.png" alt="Alt text"></p><hr><p>感谢阅读这份帮助文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;My-SQL-卸载-amp-安装-For-Windows&quot;&gt;&lt;a href=&quot;#My-SQL-卸载-amp-安装-For-Windows&quot; class=&quot;headerlink&quot; title=&quot;My SQL 卸载 &amp;amp; 安装 For Windows&quot;&gt;&lt;/a&gt;My SQL 卸载 &amp;amp; 安装 For Windows&lt;/h1&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://shixiaohe.online/categories/MySQL/"/>
    
    
      <category term="MySQL 卸载" scheme="http://shixiaohe.online/tags/MySQL-%E5%8D%B8%E8%BD%BD/"/>
    
      <category term="MySQL 安装" scheme="http://shixiaohe.online/tags/MySQL-%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Web API 编写规范(C#)</title>
    <link href="http://shixiaohe.online/2017/12/25/Web-API-%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83-C/"/>
    <id>http://shixiaohe.online/2017/12/25/Web-API-编写规范-C/</id>
    <published>2017-12-25T12:38:15.000Z</published>
    <updated>2017-12-28T15:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-API-编写规范【持续更新】"><a href="#Web-API-编写规范【持续更新】" class="headerlink" title="Web API 编写规范【持续更新】"></a>Web API 编写规范【持续更新】</h1><a id="more"></a><p>@(<a href="http://www.shixiaohe.online)[Web" target="_blank" rel="noopener">http://www.shixiaohe.online)[Web</a> API|帮助|C#]</p><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="什么是-web-api"><a href="#什么是-web-api" class="headerlink" title="什么是 web api"></a>什么是 web api</h3><p><strong>[以下仅为个人理解，如有疑义，可以共同讨论]</strong></p><p>官方定义如下，强调两个关键点，即可以对接各种客户端（浏览器，移动设备），构建http服务的框架。</p><blockquote><p>ASP.NET Web API is a framework th<a href="media/14980123522855/Web-API-%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83-C.md">Web-API-编写规范-</a>at makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.</p></blockquote><h3 id="URI-与-URL"><a href="#URI-与-URL" class="headerlink" title="URI 与 URL"></a>URI 与 URL</h3><ul><li>URI(Uniform Resource Identifiers) 统一资源标示符</li><li>URL(Uniform Resource Locator) 统一资源定位符</li></ul><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p> 应该尽量将API部署在专用域名之下。</p><pre><code>http(s)://{ProjectName}.{Terminal}.service.com例如: http(s)://tsp.api.service.com</code></pre><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>应该将API的版本号放入URL。</p><pre><code>例如：http(s)://tsp.api.service.com/v1.0/</code></pre><blockquote><p>始终要对自己的API进行版本控制。版本控制可以帮助你更快的迭代，并且可以防止无效的请求访问新的API。这还可以帮助你平滑过渡任何大版本的升级，在这个过程中你还可以继续提供老版本的API一段时间。</p><p>API的版本信息究竟是应该包含在URL里边还是header里边，围绕着这个目前存在分歧。从学术上来讲，版本信息应该放在header里边。但是为了保证能够通过浏览器去浏览资源的不同版本，版本信息应该放在URL里边</p></blockquote><h2 id="路径（URI）格式规范"><a href="#路径（URI）格式规范" class="headerlink" title="路径（URI）格式规范"></a>路径（URI）格式规范</h2><h3 id="关于分隔符“-”的使用"><a href="#关于分隔符“-”的使用" class="headerlink" title="关于分隔符“/”的使用"></a>关于分隔符“/”的使用</h3><p>“/“分隔符一般用来对资源层级的划分，</p><pre><code>例如 http://tsp.api.service.com/shapes/polygons/quadrilaterals/squaresshapes（形状）；polygons（多边形）；quadrilaterals（四边形）；squares（正方形）</code></pre><blockquote><p>对于REST API来说，”/“只是一个分隔符，并无其他含义。为了避免混淆，”/“不应该出现在URL的末尾。例如以下两个地址实际表示的都是同一个资源：</p></blockquote><pre><code>http(s)://tsp.api.service.com/shapes/  http(s)://tsp.api.service.com/shapes</code></pre><h3 id="URI中尽量使用连字符”-“代替下划线”-”的使用"><a href="#URI中尽量使用连字符”-“代替下划线”-”的使用" class="headerlink" title="URI中尽量使用连字符”-“代替下划线”_”的使用"></a>URI中尽量使用连字符”-“代替下划线”_”的使用</h3><p>连字符”-“一般用来分割URI中出现的字符串(单词)，来提高URI的可读性，例如：<br>http(s)://tsp.api.service.com/blogs/mark-masse/entries/this-is-my-first-post  </p><p>使用下划线”<em>“来分割字符串(单词)可能会和链接的样式冲突重叠，而影响阅读性。但实际上，”-“和”</em>“对URL中字符串的分割语意上还是有些差异的：”-“分割的字符串(单词)一般各自都具有独立的含义，可参见上面的例子。而”_”一般用于对一个整体含义的字符串做了层级的分割，方便阅读，例如你想在URL中体现一个ip地址的信息：210_110_25_88 .</p><h3 id="URI中统一使用小写字母"><a href="#URI中统一使用小写字母" class="headerlink" title="URI中统一使用小写字母"></a>URI中统一使用小写字母</h3><blockquote><p>根据RFC3986定义，URI是对大小写敏感的，所以为了避免歧义，我们尽量用小写字符。但主机名(Host)和scheme（协议名称:http/ftp/…）对大小写是不敏感的。</p></blockquote><h3 id="体现资源并非动作："><a href="#体现资源并非动作：" class="headerlink" title="体现资源并非动作："></a>体现资源并非动作：</h3><p>URI 片段中尽量使用名词、避免使用动词，因为动作应该通过 <strong><code>GET/POST/PUT/DELETE</code></strong>… 来表述。</p><h3 id="复数资源与单资源【统一】"><a href="#复数资源与单资源【统一】" class="headerlink" title="复数资源与单资源【统一】"></a>复数资源与单资源【<code>统一</code>】</h3><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">路由</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">POST</td><td style="text-align:left">/animals</td><td style="text-align:left">创建一个新的资源</td></tr><tr><td style="text-align:left">GET</td><td style="text-align:left">/animals</td><td style="text-align:left">获取所有资源</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">/animals?id=12</td><td style="text-align:left">获取单个资源</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">/animals?id=12</td><td style="text-align:left">删除单个资源</td></tr></tbody></table><h3 id="参数的设计允许存在冗余-不建议"><a href="#参数的设计允许存在冗余-不建议" class="headerlink" title="参数的设计允许存在冗余(不建议)"></a>参数的设计允许存在冗余(<code>不建议</code>)</h3><p>不允许API路径和URL参数有重复</p><blockquote><p> 例如：GET <code>/zoo/ID/animals</code> 与 GET <code>/zoo/ID/animals?zoo-id=ID</code> 的含义是相同的。</p><p><code>原因</code>：路由中用的  <code>ID</code>  参数 , 与  <code>zoo-id</code> 都代表  zoo 的主键值，调用接口的人员，要传两遍值, 无形当中会带来困扰和工作量.</p><p><code>不建议</code>以上例子中的第一种方式（在 URI 中以占位符的方式传参，建议第二种方式，但是 api 文档一定要标注）</p></blockquote><h3 id="根路由的名称要跟控制器保持一致"><a href="#根路由的名称要跟控制器保持一致" class="headerlink" title="根路由的名称要跟控制器保持一致"></a>根路由的名称要跟控制器保持一致</h3><blockquote><p><code>理由:</code> 后期维护时，根据 URI 找接口代码时，根据根路由名称就能找到，方便维护</p></blockquote><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">GET</td><td style="text-align:left">选择（常用）</td><td style="text-align:left">从服务器上获取<code>单个</code>具体的资源或者一个<code>资源列表</code>。</td></tr><tr><td style="text-align:left">POST</td><td style="text-align:left">创建（推荐用）</td><td style="text-align:left">在服务器上<code>创建新的资源</code>。</td></tr><tr><td style="text-align:left">PUT</td><td style="text-align:left">更新（推荐用）</td><td style="text-align:left">以<code>整体</code>的方式更新服务器上的资源。</td></tr><tr><td style="text-align:left">PATCH</td><td style="text-align:left">更新（常用）</td><td style="text-align:left">只更新服务器上<code>单个资源/资源集合</code>的<code>部分属性</code>。</td></tr><tr><td style="text-align:left">DELETE</td><td style="text-align:left">删除（常用）</td><td style="text-align:left">删除服务器上的<code>单个/资源集合</code>。</td></tr><tr><td style="text-align:left">HEAD</td><td style="text-align:left">获取（不常用）</td><td style="text-align:left">获取一个资源的元数据，如数据的哈希值或最后的更新时间。</td></tr><tr><td style="text-align:left">OPTIONS</td><td style="text-align:left">获取（不常用）</td><td style="text-align:left">获取客户端能对资源做什么操作的信息。</td></tr></tbody></table><h2 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h2><p><strong><code>针对 POST 请求，需要对字段的，必填，长度，格式（手机号，邮箱）等进行校验</code></strong></p><h2 id="状态码-Status-Codes"><a href="#状态码-Status-Codes" class="headerlink" title="状态码(Status Codes)"></a>状态码(Status Codes)</h2><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>不允许手动返回状态码，</p><pre><code>例如： StatusCode = &quot;200&quot;;</code></pre><p>正确的写法</p><pre><code>例如： StatusCode = HttpStatusCode.OK;</code></pre><h3 id="状态码总结："><a href="#状态码总结：" class="headerlink" title="状态码总结："></a>状态码总结：</h3><pre><code>#region 程序集 System.dll, v4.0.0.0// C:\Program Files (x86)\Reference         Assemblies\Microsoft\Framework\.NETFramework\v4.5\System.dll#endregionusing System;namespace System.Net{    // 摘要:     //     包含为 HTTP 定义的状态代码的值。    public enum HttpStatusCode    {        // 摘要:         // 等效于 HTTP 状态 100。         // System.Net.HttpStatusCode.Continue 指示客户端可能继续其请求。        Continue = 100,        //        // 摘要:         // 等效于 HTTP 状态 101。         // System.Net.HttpStatusCode.SwitchingProtocols 指示正在更改协议版本或协议。        SwitchingProtocols = 101,        //        // 摘要:         // 等效于 HTTP 状态 200。         // System.Net.HttpStatusCode.OK 指示请求成功，且请求的信息包含在响应中。         // 这是最常接收的状态代码。        OK = 200,        //        // 摘要:         // 等效于 HTTP 状态 201。         // System.Net.HttpStatusCode.Created 指示请求导致在响应被发送前创建新资源。        Created = 201,        //        // 摘要:         // 等效于 HTTP 状态 202。         // System.Net.HttpStatusCode.Accepted 指示请求已被接受做进一步处理。        Accepted = 202,        //        // 摘要:         // 等效于 HTTP 状态 203。         // System.Net.HttpStatusCode.NonAuthoritativeInformation         // 指示返回的元信息来自缓存副本而不是原始服务器，因此可能不正确。        NonAuthoritativeInformation = 203,        //        // 摘要:         // 等效于 HTTP 状态 204。         // System.Net.HttpStatusCode.NoContent         // 指示已成功处理请求并且响应已被设定为无内容。        NoContent = 204,        //        // 摘要:         // 等效于 HTTP 状态 205。         // System.Net.HttpStatusCode.ResetContent         // 指示客户端应重置（或重新加载）当前资源。        ResetContent = 205,        //        // 摘要:         // 等效于 HTTP 状态 206。         // System.Net.HttpStatusCode.PartialContent 指示响应是包括字节范围的 GET        // 请求所请求的部分响应。        PartialContent = 206,        //        // 摘要:         // 等效于 HTTP 状态 300。         // System.Net.HttpStatusCode.MultipleChoices 指示请求的信息有多种表示形式。        // 默认操作是将此状态视为重定向，并遵循与此响应关联的 Location 标头的内容。        MultipleChoices = 300,        //        // 摘要:         // 等效于 HTTP 状态 300。 System.Net.HttpStatusCode.Ambiguous         // 指示请求的信息有多种表示形式。         // 默认操作是将此状态视为重定向，并遵循与此响应关联的        // Location 标头的内容。        Ambiguous = 300,        //        // 摘要:         // 等效于 HTTP 状态 301。         // System.Net.HttpStatusCode.MovedPermanently         // 指示请求的信息已移到 Location        // 头中指定的 URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。        MovedPermanently = 301,        //        // 摘要:         // 等效于 HTTP 状态 301。         // System.Net.HttpStatusCode.Moved 指示请求的信息已移到 Location 头中指定的        // URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。         // 原始请求方法为 POST 时，重定向的请求将使用 GET 方法。        Moved = 301,        //        // 摘要:         // 等效于 HTTP 状态 302。         // System.Net.HttpStatusCode.Found 指示请求的信息位于 Location 头中指定的        // URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。         // 原始请求方法为 POST 时，重定向的请求将使用 GET 方法。        Found = 302,        //        // 摘要:         // 等效于 HTTP 状态 302。         // System.Net.HttpStatusCode.Redirect         // 指示请求的信息位于 Location 头中指定的        // URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。         // 原始请求方法为 POST 时，重定向的请求将使用 GET 方法。        Redirect = 302,        //        // 摘要:         // 等效于 HTTP 状态 303。 作为 POST 的结果，        // System.Net.HttpStatusCode.SeeOther 将客户端自动重定向到        // Location 头中指定的 URI。 用 GET 生成对 Location 标头所指定的资源的请求。        SeeOther = 303,        //        // 摘要:         // 等效于 HTTP 状态 303。 作为 POST 的结果，        // System.Net.HttpStatusCode.RedirectMethod 将客户端自动重定向到        // Location 头中指定的 URI。 用 GET 生成对 Location 标头所指定的资源的请求。        RedirectMethod = 303,        //        // 摘要:         // 等效于 HTTP 状态 304。 System.Net.HttpStatusCode.NotModified         // 指示客户端的缓存副本是最新的。 未传输此资源的内容。        NotModified = 304,        //        // 摘要:         // 等效于 HTTP 状态 305。 System.Net.HttpStatusCode.UseProxy         // 指示请求应使用位于 Location 头中指定的        // URI 的代理服务器。        UseProxy = 305,        //        // 摘要:         // 等效于 HTTP 状态 306。         // System.Net.HttpStatusCode.Unused         // 是未完全指定的 HTTP/1.1 规范的建议扩展。        Unused = 306,        //        // 摘要:         // 等效于 HTTP 状态 307。         // System.Net.HttpStatusCode.RedirectKeepVerb 指示请求信息位于 Location        // 头中指定的 URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。         // 原始请求方法为 POST 时，重定向的请求还将使用        // POST 方法。        RedirectKeepVerb = 307,        //        // 摘要:         // 等效于 HTTP 状态 307。         // System.Net.HttpStatusCode.TemporaryRedirect 指示请求信息位于 Location        // 头中指定的 URI 处。 接收到此状态时的默认操作为遵循与响应关联的 Location 头。        // 原始请求方法为 POST 时，重定向的请求还将使用        // POST 方法。        TemporaryRedirect = 307,        //        // 摘要:         // 等效于 HTTP 状态 400。         // System.Net.HttpStatusCode.BadRequest 指示服务器未能识别请求。         // 如果没有其他适用的错误，或者不知道准确的错误或错误没有自己的错误代码，则发送        // System.Net.HttpStatusCode.BadRequest。        BadRequest = 400,        //        // 摘要:         // 等效于 HTTP 状态 401。         // System.Net.HttpStatusCode.Unauthorized         // 指示请求的资源要求身份验证。 WWW-Authenticate        // 头包含如何执行身份验证的详细信息。        Unauthorized = 401,        //        // 摘要:         // 等效于 HTTP 状态 402。         // 保留 System.Net.HttpStatusCode.PaymentRequired 以供将来使用。        PaymentRequired = 402,        //        // 摘要:         // 等效于 HTTP 状态 403。         // System.Net.HttpStatusCode.Forbidden 指示服务器拒绝满足请求。        Forbidden = 403,        //        // 摘要:         // 等效于 HTTP 状态 404。         // System.Net.HttpStatusCode.NotFound 指示请求的资源不在服务器上。        NotFound = 404,        //        // 摘要:         // 等效于 HTTP 状态 405。         // System.Net.HttpStatusCode.MethodNotAllowed         // 指示请求的资源上不允许请求方法（POST 或 GET）。        MethodNotAllowed = 405,        //        // 摘要:         // 等效于 HTTP 状态 406。         // System.Net.HttpStatusCode.NotAcceptable         // 指示客户端已用 Accept 头指示将不接受资源的任何可用表示形式。        NotAcceptable = 406,        //        // 摘要:         // 等效于 HTTP 状态 407。         // System.Net.HttpStatusCode.ProxyAuthenticationRequired         // 指示请求的代理要求身份验证。        // Proxy-authenticate 头包含如何执行身份验证的详细信息。        ProxyAuthenticationRequired = 407,        //        // 摘要:         // 等效于 HTTP 状态 408。         // System.Net.HttpStatusCode.RequestTimeout         // 指示客户端没有在服务器期望请求的时间内发送请求。        RequestTimeout = 408,        //        // 摘要:         // 等效于 HTTP 状态 409。         // System.Net.HttpStatusCode.Conflict 指示由于服务器上的冲突而未能执行请求。        Conflict = 409,        //        // 摘要:         // 等效于 HTTP 状态 410。         // System.Net.HttpStatusCode.Gone 指示请求的资源不再可用。        Gone = 410,        //        // 摘要:         // 等效于 HTTP 状态 411。         // System.Net.HttpStatusCode.LengthRequired         // 指示缺少必需的 Content-length 头。        LengthRequired = 411,        //        // 摘要:         // 等效于 HTTP 状态 412。         // System.Net.HttpStatusCode.PreconditionFailed         // 指示为此请求设置的条件失败，且无法执行此请求。        // 条件是用条件请求标头        //（如 If-Match、If-None-Match 或 If-Unmodified-Since）设置的。        PreconditionFailed = 412,        //        // 摘要:         // 等效于 HTTP 状态 413。         // System.Net.HttpStatusCode.RequestEntityTooLarge         // 指示请求太大，服务器无法处理。        RequestEntityTooLarge = 413,        //        // 摘要:         // 等效于 HTTP 状态 414。         // System.Net.HttpStatusCode.RequestUriTooLong 指示 URI 太长。        RequestUriTooLong = 414,        //        // 摘要:         // 等效于 HTTP 状态 415。         // System.Net.HttpStatusCode.UnsupportedMediaType 指示请求是不支持的类型。        UnsupportedMediaType = 415,        //        // 摘要:         // 等效于 HTTP 状态 416。         // System.Net.HttpStatusCode.RequestedRangeNotSatisfiable         // 指示无法返回从资源请求的数据范围，因为范围的开头在资源的开头之前，        // 或因为范围的结尾在资源的结尾之后。        RequestedRangeNotSatisfiable = 416,        //        // 摘要:         // 等效于 HTTP 状态 417。         // System.Net.HttpStatusCode.ExpectationFailed         // 指示服务器未能符合 Expect        // 头中给定的预期值。        ExpectationFailed = 417,        //        UpgradeRequired = 426,        //        // 摘要:         // 等效于 HTTP 状态 500。         // System.Net.HttpStatusCode.InternalServerError         // 指示服务器上发生了一般错误。        InternalServerError = 500,        //        // 摘要:         // 等效于 HTTP 状态 501。         // System.Net.HttpStatusCode.NotImplemented 指示服务器不支持请求的函数。        NotImplemented = 501,        //        // 摘要:         // 等效于 HTTP 状态 502。         // System.Net.HttpStatusCode.BadGateway         // 指示中间代理服务器从另一代理或原始服务器接收到错误响应。        BadGateway = 502,        //        // 摘要:         // 等效于 HTTP 状态 503。         // System.Net.HttpStatusCode.ServiceUnavailable         // 指示服务器暂时不可用，通常是由于过多加载或维护。        ServiceUnavailable = 503,        //        // 摘要:         // 等效于 HTTP 状态 504。         // System.Net.HttpStatusCode.GatewayTimeout         // 指示中间代理服务器在等待来自另一个代理或原始服务器的响应时已超时。        GatewayTimeout = 504,        //        // 摘要:         // 等效于 HTTP 状态 505。         // System.Net.HttpStatusCode.HttpVersionNotSupported         // 指示服务器不支持请求的        // HTTP 版本。        HttpVersionNotSupported = 505,    }}Http状态码</code></pre><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>如果状态码是4xx，就应该向用户返回出错信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: &quot;Invalid API key&quot;</span><br></pre></td></tr></table></figure><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><h3 id="动作-》结果"><a href="#动作-》结果" class="headerlink" title="动作 ==》结果"></a>动作 ==》结果</h3><blockquote><p><code>GET /collection</code>：返回资源对象的列表（数组）</p><p><code>GET /collection/resource</code>：返回单个资源对象</p><p><code>POST /collection</code>：返回新生成的资源对象</p><p><code>PUT /collection/resource</code>：返回完整的资源对象</p><p><code>PATCH /collection/resource</code>：返回完整的资源对象</p><p><code>DELETE /collection/resource</code>：返回一个空文档</p></blockquote><h3 id="返回数据格式"><a href="#返回数据格式" class="headerlink" title="返回数据格式"></a>返回数据格式</h3><blockquote><p>统一使用 <strong><code>Json</code></strong> 字符串</p></blockquote><pre><code>例如：    {        code: 200,        message: &quot;信息提示&quot;,        data: {            id: 11,            name: &quot;king&quot;        }    }</code></pre><h3 id="返回字段约束"><a href="#返回字段约束" class="headerlink" title="返回字段约束"></a>返回字段约束</h3><blockquote><p>返回的数据中的字段名称万万不能直接将数据库中的字段直接返回.</p><p><code>例如：</code> 数据库中字段名：User_Name, 返回的字段应为：username（自己看着命名即可）<br><code>理由：</code> 防止数据库字段微调时影响手机端。</p></blockquote><p><code>code</code> 根据上文状态码进行返回，不同错误对应不同的状态吗</p><p><code>message</code> 提示信息要进行统一，根据不同情况，写入 BaseController 类中</p><p><code>data</code> data可以是JSON对象也可以是JSON数组，具体看业务需求。但要保证在不同情况下data的类型是一致的。<br>例如：data在有数据的时候是列表，那么在没有数据的时候应该是空列表而不是字符串。<br>此规范不仅仅是适用于data，同样适用于其他数据字段。</p><h3 id="特殊字段排除"><a href="#特殊字段排除" class="headerlink" title="特殊字段排除"></a>特殊字段排除</h3><p>返回的 Json 数据中不可包含以下关键字</p><p><strong><code>IOS:</code></strong></p><blockquote><p>属性关键字</p><p><code>copy</code>, <code>assign</code>, <code>strong</code>, <code>retain</code>, <code>weak</code>, <code>readonly</code>, <code>readwrite</code>, <code>nonatomic</code>, <code>atomic</code>, <code>class</code>, <code>typename</code></p><p>数据类型关键字</p><p><code>const</code>, <code>int</code>, <code>bool</code>, <code>BOOL</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>long</code>, <code>short</code>, <code>static</code>, <code>long long</code>, <code>signed</code>, <code>unsigned</code>, <code>YES</code>, <code>NO</code>, <code>nil</code>, <code>NULL</code>, <code>id</code>,<code>instancetype</code></p><p>常用语法关键字</p><p><code>break</code>, <code>continue</code>, <code>return</code>, <code>do</code>, <code>while</code>, <code>if</code>, <code>else</code>, <code>for</code>, <code>instanceof</code>, <code>switch</code>, <code>case</code>, <code>default</code>, <code>try</code>, <code>goto</code>, <code>new</code></p><p>中函数关键字</p><p><code>super</code>, <code>this</code>, <code>void</code>, <code>IBAction</code>, <code>nullable</code>, <code>typedef</code>, <code>NS_ENUM</code>, <code>self</code></p></blockquote><p><strong><code>Android：</code></strong></p><blockquote><p><code>private</code>, <code>protected</code>, <code>public</code></p><p><code>abstract</code>, <code>class</code>, <code>extends</code>, <code>final</code>, <code>implements</code></p><p><code>interface</code>,<code>native</code>, <code>new</code>, <code>static</code>, <code>strictfp</code></p><p><code>synchronized</code>, <code>transient</code>, <code>volatile</code></p><p><code>break</code>, <code>continue</code>, <code>return</code>, <code>do</code>, <code>while</code>, <code>if</code>, <code>else</code>, <code>for</code>, <code>instanceof</code>, <code>switch</code>, <code>case</code>, <code>default</code></p><p><code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code>, <code>try</code></p><p><code>import</code>, <code>package</code></p><p><code>boolean</code>, <code>byte</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, <code>short</code></p><p><code>super</code>, <code>this</code>, <code>void</code>, <code>goto</code>, <code>null</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-API-编写规范【持续更新】&quot;&gt;&lt;a href=&quot;#Web-API-编写规范【持续更新】&quot; class=&quot;headerlink&quot; title=&quot;Web API 编写规范【持续更新】&quot;&gt;&lt;/a&gt;Web API 编写规范【持续更新】&lt;/h1&gt;
    
    </summary>
    
      <category term=".NET" scheme="http://shixiaohe.online/categories/NET/"/>
    
    
      <category term="C#" scheme="http://shixiaohe.online/tags/C/"/>
    
      <category term="Web API" scheme="http://shixiaohe.online/tags/Web-API/"/>
    
      <category term="编码规范" scheme="http://shixiaohe.online/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shixiaohe.online/2017/12/23/hello-world/"/>
    <id>http://shixiaohe.online/2017/12/23/hello-world/</id>
    <published>2017-12-23T03:59:54.000Z</published>
    <updated>2017-12-23T15:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
